@page "/viewrecipe/{recipeId:guid}"

@using FamilyRecipes.WebApp.Data
@inject RecipeService RecipeService

@if (_recipe is null)
{
    <p><em>Loading...</em></p>
}
else
{

    <h3>View Recipe for @_recipe.Name</h3>

    <p>recipe id : @RecipeId</p>

    <p>View details about the recipe that was clicked on. adding items to get an idea visually of what I want to show</p>

    <p>or have an accordian for the steps?</p>
    <div class="accordion" id="accordionExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    Accordion Item #1
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingTwo">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    Accordion Item #2
                </button>
            </h2>
            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingThree">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                    Accordion Item #3
                </button>
            </h2>
            <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                </div>
            </div>
        </div>
    </div>

    <p>a table for each ingredient</p>
    <table class="table table-dark table-hover">
        ...
    </table>


    <p>maybe an image for each step?</p>
    <img src="..." class="img-fluid" alt="...">

    <p>Section for each step able to check off</p>
    <ul class="list-group">
        <li class="list-group-item">
            <input class="form-check-input me-1" type="checkbox" value="" aria-label="...">
            First checkbox
        </li>
        <li class="list-group-item">
            <input class="form-check-input me-1" type="checkbox" value="" aria-label="...">
            Second checkbox
        </li>
        <li class="list-group-item">
            <input class="form-check-input me-1" type="checkbox" value="" aria-label="...">
            Third checkbox
        </li>
        <li class="list-group-item">
            <input class="form-check-input me-1" type="checkbox" value="" aria-label="...">
            Fourth checkbox
        </li>
        <li class="list-group-item">
            <input class="form-check-input me-1" type="checkbox" value="" aria-label="...">
            Fifth checkbox
        </li>
    </ul>


    <p>special tooltips for things if needed</p>
    <button type="button" class="btn btn-secondary" data-bs-toggle="tooltip" data-bs-html="true" title="<em>Tooltip</em> <u>with</u> <b>HTML</b>">
        Tooltip with HTML
    </button>

}

@code {
    [Parameter]
    public Guid RecipeId { get; set; }

    private RecipeModel? _recipe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _recipe = await RecipeService.GetRecipeByID(RecipeId.ToString());
        StateHasChanged();
    }
}